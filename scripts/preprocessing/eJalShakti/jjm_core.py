import json
import io
import copy
from os import link
import shutil

from multiprocessing import Pool
from pathlib import Path
from numpy import Inf
import requests

from bs4 import BeautifulSoup

# webpages
#
# https://github.com/ramSeraph/opendata/tree/master/jjm
#
# list of schemes and sources
# https://ejalshakti.gov.in/IMISReports/Reports/BasicInformation/rpt_SchemesSourcesGWSW_S.aspx?Rep=0&RP=Y
# 
# water purification plants and contaminants
# https://ejalshakti.gov.in/IMISReports/Reports/BasicInformation/rpt_RWS_CommunityWaterPurificationPlant_S.aspx?Rep=0&RP=Y
#
# water quality testing
# https://ejalshakti.gov.in/IMISReports/Reports/TargetAchievement/rpt_WQM_WaterQualityTestingInLabs_S.aspx?Rep=0&RP=Y&APP=IMIS
#
# JJM Dashboard & FHTC
# https://ejalshakti.gov.in/jjmreport/JJMIndia.aspx

class Info():
    JJMPATH = Path.home().joinpath('Code', 'atree', 'data', 'jjm')
    # SCHEMESURL = 'https://ejalshakti.gov.in/IMISReports/Reports/BasicInformation/rpt_SchemesSourcesGWSW_S.aspx?Rep=0&RP=Y'
    SCHEMESURL = 'https://ejalshakti.gov.in/IMISReports/Reports/BasicInformation/rpt_SchemesSourcesGWSW_D.aspx?Rep=0'
    PUREURL = 'https://ejalshakti.gov.in/IMISReports/Reports/BasicInformation/rpt_RWS_CommunityWaterPurificationPlant_S.aspx?Rep=0&RP=Y'
    WQURL = 'https://ejalshakti.gov.in/IMISReports/Reports/TargetAchievement/rpt_WQM_WaterQualityTestingInLabs_S.aspx?Rep=0&RP=Y&APP=IMIS'
    FHTCURL = 'https://ejalshakti.gov.in/jjmreport/JJMIndia.aspx'
    def __init__(self) -> None:
        Info.JJMPATH.mkdir(parents=True, exist_ok=True)

class JJM(Info):
    def __init__(self) -> None:
        super().__init__()
    
    def get_base_header(self):
        return {
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept-Language': 'en-US,en;q=0.9',
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive',
            'Content-Length': '22880',
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'Cookie': 'ASP.NET_SessionId=hw5omcemufyb4qjplm03cpox',
            'DNT': '1',
            'Host': 'ejalshakti.gov.in',
            'Origin': 'https://ejalshakti.gov.in',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-origin',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.26',
            'X-MicrosoftAjax': 'Delta=true',
            'X-Requested-With': 'XMLHttpRequest',
            'sec-ch-ua': '"Microsoft Edge";v="107", "Chromium";v="107", "Not=A?Brand";v="24"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"Windows"',
            'sec-gpc': '1',
        }
    def get_base_form_data(self, soup):
        hidden_inputs = soup.find_all('input', { 'type': 'hidden' })
        base_form_data = {}
        for inp in hidden_inputs:
            ident = inp.attrs['id']
            val = inp.attrs.get('value', '')
            base_form_data[ident] = val
        return base_form_data

    def get_soup(self, base_url):
        session = requests.session()
        resp = session.get(base_url)
        if not resp.ok:
            raise IOError(f'failed to get data from {base_url}')
        soup = BeautifulSoup(resp.text, 'html.parser')
        return session, soup

    def get_state_details(self, soup):
        table = soup.find('table', {'class': 'SelectData'})
        if not table:
            table = soup.find('div', {'id': 'Div1'})
        state_select = table.find('select', {'id': 'ContentPlaceHolder_ddState'})
        state_options = state_select.find_all('option')
        # for s_option in state_options:
        #     val = s_option.attrs['value']
        #     if val == '-1':
        #         continue
        #     else:
        #         s_name = s_option.text
        return [(s_option.attrs['value'], s_option.text) for s_option in state_options]

class Schemes(JJM):
    def __init__(self) -> None:
        super().__init__()
        print(self.JJMPATH)
        session, soup = self.get_soup(self.SCHEMESURL)
        state_vals_names = self.get_state_details(soup)
        base_form_data = self.get_base_form_data(soup)
        # form_data = {}
        # form_data.update(base_form_data)
        form_data = {
            'ctl00$ScriptManager1': 'ctl00$upPnl|ctl00$ContentPlaceHolder$btnGO',
            '__EVENTTARGET': '',
            '__EVENTARGUMENT': '',
            '__LASTFOCUS': '',
            '__VIEWSTATE': '',
            '__VIEWSTATEGENERATOR': '24CAEA11',
            '__VIEWSTATEENCRYPTED': '',
            '__EVENTVALIDATION': '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',
            'ctl00$ddLanguage': '',
            'ctl00$ContentPlaceHolder$ddState': '004', # State value
            '__ASYNCPOST': 'true',
            'ctl00$ContentPlaceHolder$btnGO': 'Show'
        }
        base_header = self.get_base_header()
        base_header['Referer'] = self.SCHEMESURL
        # resp = session.post(self.SCHEMESURL, data=form_data, headers=base_header)
        # url = 'https://ejalshakti.gov.in/IMISReports/Reports/BasicInformation/rpt_SchemesSourcesGWSW_D.aspx?Rep=0'
        resp = session.post(self.SCHEMESURL, data=form_data, headers=base_header, allow_redirects=True)
        if not resp.ok:
            raise IOError('post to get district list failed')
        # html, base_form_data = get_data_from_post(resp.text)
        print(BeautifulSoup(resp.text, 'html.parser'))

if __name__ == '__main__':
    test = Schemes()